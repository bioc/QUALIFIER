\name{getQAStats}
\docType{methods}
\alias{getQAStats}
\alias{getQAStats-methods}
\alias{getQAStats,environment-method}
\alias{getQAStats,GatingSet-method}
\alias{getQAStats,GatingHierarchy-method}
\alias{saveToDB}


\title{
Calculate and extract the statistics from the gating hierarchies.   
}
\description{
Calculate and extract statistics of each gated cell population in the gating hierarchies generated by flowWorkspace package.
}
\usage{
getQAStats(obj,...) 
}
\arguments{
  
  \item{obj}{
  			A \code{\link[=GatingHierarchy-class]{gating hierarchy}} that stores the gated cell populations for one FCS file; 
  			or a \code{\link[=GatingSet-class]{GatingSet}} containing multiple \code{gating hierarchies} 
  			or an \code{environment} that stores the \code{GatingSet} and all other information.
  			}
  
  \item{...}{
  			isFlowCore:
  						A logical scalar indicating whether the statistics are the original ones in flowJo xml workspace or 
  						the re-calculated version by flowCore in R.
  			nslaves:
  					An integer scalar indicating the number of nodes used for parallel computing when obj is \code{GatingHierarchy} or \code{GatingSet}.
  					 When the \code{parallel} package is loaded and nslaves is NULL, its value is automatically decided by available number of nodes.
  				 	When it is set to 1, then forced to run in serial mode.
  				}
}

\details{
      This is the second preprocessing step followed by parsing gating template from flowJo workspace with \code{\link{parseWorkspace}}.
      Different QA checks can be performed after this step is done. 
      when obj is an \code{environment} the results are stored as a dataframe with the name of "statsOfGS" in the environment.
      
}

\value{
  a data frame when obj is a \code{GatingHierarchy} or \code{GatingSet},
 
 }

\author{
Mike Jiang,Greg Finak

Maintainer: Mike Jiang <wjiang2@fhcrc.org>
}

\seealso{\code{\link{qaCheck}}}

\examples{
\dontrun{
load(file="gatingHierarchy/GS.Rda")
saveToDB(db,G,anno)##append the annotation  and Gating set to db 
getQAStats(G[[1]])#extract stats from a gating hierarchy
getQAStats(G)#from a gating set
getQAStats(db,nslaves=10)#from an environment that contains a gating set
}
}
\keyword{methods}

