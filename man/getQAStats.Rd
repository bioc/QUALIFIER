\name{getQAStats}
\docType{methods}
\alias{getQAStats}
\alias{getQAStats-methods}
\alias{getQAStats,environment-method}
\alias{getQAStats,GatingSet-method}
\alias{getQAStats,GatingHierarchy-method}
\alias{initDB}
\alias{saveToDB}
\alias{qaPreprocess}
\alias{qaCheckList}
\alias{tubesevents}
\alias{db}



\title{
Some preprocessing steps before the QA check and plot.   
}
\description{
\code{initDB}initializes and prepares the data environment for storing the QA data.
\code{saveToDB} save the gating set and annotation data into the data environment.
\code{getQAStats} calculates and extract statistics of each gated cell population in the gating hierarchies generated by flowWorkspace package.
\code{qaPreprocess}  is a convenient wrapper that does saveToDB,getQAStats in one call
}
\usage{

initDB(db=.db)
saveToDB(db=.db,gs,gs.name="default gatingSet",metaFile,fcs.colname="name",date.colname=NULL)
getQAStats(obj,...) 
qaPreprocess(db=.db,gs,gs.name,metaFile,fcs.colname,date.colname,...)
}
\arguments{
  
  \item{db}{ An environment storing all the QA data. By default it is an hidden global environment \code{.db}.}
  
  \item{gs}{A \code{\link[=GatingSet-class]{GatingSet}} containing multiple \code{gating hierarchies}}

  \item{gs.name}{A character scalar giving the name of the GatingSet.}
	  
  \item{metaFile}{A character scalar giving the file path of the sample annotation data, which is a csv spreadsheet contains 
					the meta information. Each row corresponds to one FCS file and 
					The QUALIFIER package looks for the FCS filename from "name" column of the spreadsheet.
  				}

  \item{fcs.colname}{A character scalar indicating column name that specify FCS file names in annotation data.}

  \item{date.colname}{A character scalar indicating column names that contains date information which are automatically formatted to "\%m/\%d/\%y".}

  \item{obj}{
	  			A \code{\link[=GatingHierarchy-class]{gating hierarchy}} that stores the gated cell populations for one FCS file; 
	  			or a \code{\link[=GatingSet-class]{GatingSet}} containing multiple \code{gating hierarchies} 
	  			or an \code{environment} that stores the \code{GatingSet} and all other information.
	  			}
  

  \item{...}{
  			isFlowCore:
  						A logical scalar indicating whether the statistics are the original ones in flowJo xml workspace or 
  						the re-calculated version by flowCore in R.
  			nslaves:
  					An integer scalar indicating the number of nodes used for parallel computing when obj is \code{GatingHierarchy} or \code{GatingSet}.
  					 When the \code{parallel} package is loaded and nslaves is NULL, its value is automatically decided by available number of nodes.
  				 	When it is set to 1, then forced to run in serial mode.
  				}
}

\details{
      This is the second preprocessing step followed by parsing gating template from flowJo workspace with \code{\link{parseWorkspace}}.
      Different QA checks can be performed after this step is done. 
      when obj is an \code{environment} the results are stored as a dataframe with the name of "statsOfGS" in the environment.
      
}

\value{
  
\code{saveToDB} returns an automatically generated gating set id.
\code{getQAStats} a data frame when obj is a \code{GatingHierarchy} or \code{GatingSet},
\code{qaPreprocess} returns the list of elements within the data environment.
 
 
 }

\author{
Mike Jiang,Greg Finak

Maintainer: Mike Jiang <wjiang2@fhcrc.org>
}

\seealso{\code{\link{qaCheck}},\code{\link{qaTask}},\code{\link{qaReport}}} 

\examples{
\dontrun{
#prepare the data environment
db<-new.env()
initDB(db)

metaFile="~/rglab/workspace/QUALIFIER/misc/ITN029ST/FCS_File_mapping.csv"
##append the annotation  and Gating set to db
metaFile<-"FCS_File_mapping.csv"
saveToDB(db=db,gs=G
		,metaFile=metaFile
		,fcs.colname="FCS_Files"
		,date.colname=c("RecdDt","AnalysisDt")
	) 
getQAStats(G[[1]])#extract stats from a gating hierarchy
getQAStats(G)#from a gating set
getQAStats(db)#from an environment that contains a gating set

##or use the wrapper qaPreprocess that does saveToDB and getQAStats together in one call
qaPreprocess(db=db,gs=G
			,metaFile=metaFile
			,fcs.colname="FCS_Files"
			,date.colname=c("RecdDt","AnalysisDt")
			)
#load QA check list
checkListFile<-file.path(system.file("data",package="QUALIFIER"),"qaCheckList.csv.gz")
qaTask.list<-read.qaTask(db,checkListFile)

}
}
\keyword{methods}

